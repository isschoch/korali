Mark Martori Lopez

Tuesday 19 May 2020

Tasks:

1- [Solved] CURRENT GOAL: NEW FORMAT OF APP PRESENTATION.

	1- Split the file into different files to make it more readable. Creating Frame Classes apart.
	2- New file with main KORALI class -> Root.
	3- New File with app running.
	4- Restructured the Korali APP following the 'image.png' file.
	5- Connect files through classes.

2- [Solved] New create and Delete Experiment Functions.

3- [Solved] New menubar.

4- [Solved] Buttons: General Settings, Problems, Solvers.

5- [Solved] All readings done when initializing app.

6- [Solved] Cascades created from Problems and Solvers Menubuttons.

-----------------------------------------------------

Thursday 14 May 2020

Tasks:

1- [Solved] CURRENT GOAL: Modify the Distributions and convert them into Tabs like the Variables.

		Step 1: [Solved] Modify the way to create Distributions.

		Step 2: [Solved] Add one more frame specific for the Distributions.

		Step 3: [Solved] Add a new notebook and a variable to determine in which tab of the notebook are we.

		Step 4: [Solved] Create a New Distribution button in the main menu.

		Step 5: [Solved] Create a new Function to delete Distributions and add it in the main menu with a button too.

2- [Semi-Solved] CURRENT GOAL 2: Modify functions to import and export the data, as it changed.
	
		Step 1: [Solved] Divide the Distributions into tabs when reading it.

		...
		...

-----------------------------------------------------
Tuesday 12 May 2020

Tasks:

1- [Solved] Distribution added to exported file.

2- [Solved] CURRENT GOAL: - All parts must be solved for both, importation and exportation options.
	
Ending up with:

{
   "Random Seed": "1",
   "File Output": {
      "Path": "Escritorio/Korali",
      "Enabled": "No",
      "Frequency": "10",
      "Store Sample Information": "Yes"
   },
   "Console Output": {
      "Verbosity": "Detailed",
      "Frequency": "20"
   },
   "Problem": {
      "Type": "execute",
      "Gaussian Process Json File": "gaussian.json",
      "X Data": "[0,1,2,3,4]",
      "Y Data": "[10,9,8,7,6]"
   },
   "Solver": {
      "Type": "SAEM",
      "Alpha 1": "1",
      "Alpha 2": "7",
      "M Step Solver Type": "CMAES"
   },
   "Variables": [
      {
         "Parameter List": "[0,2,4,6,8]",
         "Name": "Initial Guess",
         "Initial Value": "0"
      },
      {
         "Parameter List": "[2,4,6,8,10]",
         "Name": "Second Guess",
         "Initial Value": "2"
      }
   ],
   "Distributions": [
      {
         "Name": "Uniform 0",
         "Type": "Univariate",
         "Maximum": "100",
         "Minimum": "0",
         "Random Seed": "1"
      },
      {
         "Name": "Uniform 1",
         "Type": "Univariate/uniform",
         "Maximum": "50",
         "Minimum": "10",
         "Random Seed": "0"
      }
   ]
}

-----------------------------------------------------
Wednesday 6 May 2020

Tasks:

1- [Solved] Experiment Configuration added.


2-[Solved] Readapt the frames of the main window. Add one more in order to set the Main Configurations such as Random Seed, File Output and Console Output.


3- [Solved] Exported file changed

from:
{
   "reference": {
      "Computational Model": "Hola",
      "Reference Data": "que",
      "Likelihood Model": "tal"
   },
   "CMAES": {
      "Population Size": "1000",
      "Mu Value": "constant",
      "Mu Type": "default",
       .
       .
       .

to:
{
   "Random Seed": "0",
   "File Output": {
      "Path": "",
      "Enabled": "Default",
      "Frequency": "",
      "Store Sample Information": "Default"
   },
   "Console Output": {
      "Verbosity": "Default",
      "Frequency": ""
   },
   "Problem": {
      "Type": "sampling",
      "Probability Function": "aaa"
   },
   "Solver": {
      "Type": "LMCMAES",
      "Population Size": "100",
      "Mu Value": "",
      "Mu Type": "Default",


4- [Semi-Solved] Distribution added to exported file.

-----------------------------------------------------
Tuesday 5 May 2020

Tasks:

1- [Solved] Exploit the space of each frame. Smaller font, better justifications, pady and padx.


2- [Solved] Cascade instead of boolean button. + Adjust 'createConfig' function to read the final value of the cascade.


3- [Solved] Remove .config from problem and solver selection cascade.


4- [Solved] Add menuOption when 'Options' in .config file; one example:

"Options": [
                { "Value": "Linear", "Description": "Distributes Mu values linearly." },
                { "Value": "Equal", "Description": "Distributes Mu values equally." },
                { "Value": "Logarithmic", "Description": "Distributes Mu values logarithmically." }


4- [Solved] Experiment Configuration added.

5- [Semi-Solved] Distribution Configuration added.

-----------------------------------------------------
Wednesday 29 April 2020

Tasks:

1- [Solved] Current GOAL: Add a Variable Tab with its content if Imported file has more variables.

		Step 1: [Solved] Modify the way to read the imported file so it can be split into different tab Variables.

		Step 2: [Solved] Modify the way we create VariableTabs.

		Step 3:[Solved] Interconnect several functions to finish it.

2- [Solved] Modify createFile function in order to allow creating several files while modifying the variables.

3- [Solved] Edit File's type so only the .txt, .log and .config are readable.

4- [Solved] Provide functionality to the main menu of the app. Save as..., Export as..., Import File...

5- [Solved] Add a multiple-frame option to jump from one to another one to divide the app in 2. Setting the variables in one frame and visualizating its results ( graph ) in the other one.

-----------------------------------------------------
Tuesday 28 April 2020

Tasks:

1- [Solved] Current GOAL: Finish filling the entries from Solver and Variables when importing a file.
	Step 5: [Solved] Insert all the values from the imported file into the corresponding entries. Radiobuttons,Entries and Spinboxes.

2- [Solved] Fix crearVariables function as some files do not have 'Variables Configuration'. This will create an issue in further functions.

3- [Solved] Fix 'crearframeVariables' and 'printVariables' functions as the variables were getting overwritten by the last one.

4- [Solved] Pop warning message if after importing a file, the user wants to create a file.

	NEXT GOAL: [Semi-Solved] Add a Variable Tab with its content if Imported file has more variables.

		Step 1: [Solved] Modify the way to read the imported file so it can be split into different tab Variables.

		Step 2: [Solved] Modify the way we create VariableTabs.

		Step 3:[Not Solved] Interconnect several functions to finish it.

-----------------------------------------------------
Wednesday 22 April 2020

Tasks:

1- [Solved] Add an option to clear the experiments if needed. ( Deleting the widgets previously set ).

2- [Semi-Solved] CURRENT GOAL : Add the option to import a file, read it and print its content organized on the screen.
	Step 1: [Solved] Create the button for importing the file.

	Step 2: [Solved] Create the function to open a dialogue asking for an input file.

	Step 3: [Solved] Display all the entries belonging to the problem and solver used in the config file.

	Step 4: [Solved] Display each entry in its corresponding frame.

	Step 5: [Semi-Solved] Insert all the values from the imported file into the corresponding entries.
		-> So far only with the problem chosen.

3- [Not-Solved] NEXT GOAL: Finish filling the entries from Solver and Variables when importing a file.
	

-----------------------------------------------------
Tuesday 21 April 2020

Tasks:

1- [Solved] Allow the user to copy the variable Frame into a new Variable.

2- [Solved] Update the dictionary 'results' every time you add a new variable.

3- [Solved] Delete the variable from the dictionary 'results' if the user decides to delete the variable Frame.

4- [Solved] Dump the values written by the user into the .config file.

5- [Solved] Collect the values from different Variables Frames in different dictionaries inside the list 'Variables' of the .config.

6- [Solved] Clean some 'global' variables to make the app more coherent.

7- [Not-Solved] NEXT GOAL : Add the option to import a file, read it and write its content on the screen.

---------------------------------------------------
Wednesday 15 April 2020

Tasks:

1- [Solved] Current GOAL: Create a .config out of the options selected in an experiment.
The config should look like this:
{{solver},{problem},[{var1},{var2},{var3}]}

	Step 1: [Solved] Create a dictionary to store as keys the names of the entries and as values their inputs typed by the user.

	Step 2: [Solved] Create a function that is able to retrieve all the values from the entries.

	Step 3: [Solved] The function must retrieve the values from all the different frames when clicking the button.

	Step 4: [Solved] Get values from entries, spinboxes and radiobuttons.
	
	Step 5: [Solved] Retrieve also the type of Problem and Solver selected and indicate which variable is which.

	Step 6: [Solved] Open the file and write on it in an organized/.config file way.

2- [Solved] Launch a dialogue to download the file in different extensions in any folder you want.


OUTPUT OF THE FILE:
Start
### .config File obtained from Korali### 
 
Experiment 1 {
{Problem: {sampling: [{Probability Function: Gaussian}]}},
{Solver: {CMAES: [{Population Size: 10000},{Mu Value: 1},{Mu Type: Constant},{Initial Sigma Cumulation Factor: 10},{Initial Damp Factor: 0},{Is Sigma Bounded: True},{Initial Cumulative Covariance: 20},{Is Diagonal: False},{Viability Population Size: 4},{Viability Mu Value: 10},{Max Covariance Matrix Corrections: 30},{Target Success Rate: 90},{Covariance Matrix Adaption Strength: 0},{Normal Vector Learning Rate: 0},{Global Success Learning Rate: 0}]}},
{Variables: [Variable 1: {Name: StDev},{Minimum Standard Deviation Update: 5}]}}
}

End
---------------------------------------------------
Tuesday 14 April 2020

Tasks:

1- [Solved] Improved efficiency by merging functions printConfig and printVariables into printData.

2- [Semi-Solved] To Fix: Scrollbar doesnt adjust when inserting more rows than frame-height.

3- [Not Solved] "TO FINISH: Pass from one tab-variable1 to the next tab-variable2 the same information so we can have several variables with same content for same experiment."

4- [Solved] Add bottom to create the Config File.

5- [Solved] Current GOAL: Create a .config out of the options selected in an experiment.
The config should look like this:
{{solver},{problem},[{var1},{var2},{var3}]}

	Step 1: [Solved] Create a dictionary to store as keys the names of the entries and as values their inputs typed by the user.

	Step 2: [Solved] Create a function that is able to retrieve all the values from the entries.

	Step 3: [Solved] The function must retrieve the values from all the different frames when clicking the button 'Done!'.
	
	Step 4: [Solved] Retrieve also the type of Problem and Solver.

	Step 5: [Solved] Create the file and store it in the proper folder.


Step 6: [Semi-Solved] Structure the .config file.



-----------------------------------
Wednesday 8 April 2020

Tasks:

1- [Solved] To Fix: All entries get overwritten by the first one when typing something. Solved.

2- [Semi-Solved] To improve: functions printConfig and printVariables can be merged to make the code cleaner and shorter.

3- [Semi-Solved] To Fix: Scrollbar doesnt adjust when inserting more rows than frame-height. Not-Solved. To do so, task 2 must be solved.


4- [Not Solved] "TO FINISH: Pass from one tab-variable1 to the next tab-variable2 the same information so we can have several variables with same content for same experiment."

5- [Semi-solved] Current GOAL: Create a .config out of the options selected in an experiment.
The config should look like this:
{{solver},{problem},[{var1},{var2},{var3}]}

	Step 1: [Solved] Create a dictionary to store as keys the names of the entries and as values their inputs typed by the user.

	Step 2: [Solved] Create a function that is able to retrieve all the values from the entries.

	Step 3: [Not Solved] The function must retrieve the values from all the different frames when clicking the button 'Done!'. To solve this I need to reorganize the parameters passed between the functions in order to improve efficiency, to do so, task 2 must be solved.

----------------------------------------
Tuesday 7 April 2020

Tasks:
- Re-code the relationships between tabs in order to be able to delete them and add new ones in a logical order. Solved.

- Create a dictionary to facilitate passing frames globally. Semi-solved. It may need more options in the future.

- Create a new function: 
	def on_tab_selected(event):
	# Respond to an event and provides the curent selected tab.

- Fix the comunication between the tabs-variables and tabs-experiments in order to have several variables in one unique experiment. Solved.

- Fix deleteTab() function. Solved.
- Fix deleteVariable() function. Solved.


TO FINISH:
- Pass from one tab-variable1 to the next tab-variable2 the same information so we can have several variables with same content for same experiment. Not Solved yet.


TO START:
- Starting with next goal:

Create a .config out of the options selected in an experiment.
The config should look like this:
{{solver},{problem},[{var1},{var2},{var3}]}




