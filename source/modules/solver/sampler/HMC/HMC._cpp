#include "modules/conduit/conduit.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/sampler/HMC/HMC.hpp"

#include <chrono>
#include <limits>
#include <numeric>

#include <gsl/gsl_linalg.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_multimin.h>
#include <gsl/gsl_sort_vector.h>
#include <gsl/gsl_statistics.h>

namespace korali
{
namespace solver
{
namespace sampler
{
void HMC::setInitialConfiguration()
{
  //////////////////////////////////////////// My Code: START /////////////////////////////////////////////    
  if (_burnIn < 0) KORALI_LOG_ERROR("Burn In must be larger equal 0 (is %zu).\n", _burnIn);
  if (_nonAdaptionPeriod < 0) KORALI_LOG_ERROR("Non Adaption Period must be larger equal 0 (is %zu).\n", _nonAdaptionPeriod);

  size_t dim = _k->_variables.size();
  
  // Resizing vectors of internal settings to correct dimensions
  _choleskyDecompositionMetric.resize(dim * dim);
  _positionLeader.resize(dim);
  _positionCandidate.resize(dim);
  _momentumLeader.resize(dim);
  _momentumCandidate.resize(dim);
  _positionMean.resize(dim);
  _metric.resize(dim * dim);
  _inverseMetric.resize(dim * dim);
  _inverseMetricPlaceholder.resize(dim * dim);
  _choleskyDecompositionEuclideanMetric.resize(dim * dim);

  // Filling vectors of internal settings to 0.0
  std::fill(std::begin(_choleskyDecompositionMetric), std::end(_choleskyDecompositionMetric), 0.0);
  std::fill(std::begin(_choleskyDecompositionEuclideanMetric), std::end(_choleskyDecompositionEuclideanMetric), 0.0);
  std::fill(std::begin(_metric), std::end(_metric), 0.0);
  std::fill(std::begin(_inverseMetric), std::end(_inverseMetric), 0.0);
  
  // Setting position to inital mean, cholesky decomposition
  for (size_t i = 0; i < dim; ++i)
  {
    _positionLeader[i] = _k->_variables[i]->_initialMean;
    _metric[i*dim + i] = _k->_variables[i]->_initialStandardDeviation * _k->_variables[i]->_initialStandardDeviation;
    _inverseMetric[i*dim + i] = 1.0 / _metric[i*dim + i];
    _choleskyDecompositionMetric[i*dim + i] = _k->_variables[i]->_initialStandardDeviation;
  }

  // Init Generation
  _acceptanceCount = 0;
  _proposedSampleCount = 0;
  _chainLength = 0;
  _acceptanceRate = 1.0;
  //////////////////////////////////////////// My Code: END //////////////////////////////////////////////
}

void HMC::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  bool _sampleAccepted = false;

  /////////////////////////////////////////// My Code: START /////////////////////////////////////////////

  // Samples Momentum Candidate from N(0.0, metric)
  generateCandidate();
  _momentumCandidate[0] = _normalGenerator->getRandomNumber();
  // Save old Energies
  _momentumLeader = _momentumCandidate;
  double K_old = K(_momentumLeader);
  double U_old = U(_positionLeader);
  _positionCandidate = _positionLeader;
  
  // Perform Num Integration Steps of Leapfrog scheme to Momentum Candidate and Position Candidate
  for(size_t i = 0; i < _numIntegrationSteps; ++i)
  {
    leapFrogStep();
  }

  // Save new Energies
  double K_new = K(_momentumCandidate);
  double U_new = U(_positionCandidate);

  double u = _uniformGenerator->getRandomNumber();
  double alpha = std::min(1.0, std::exp(-(K_new - K_old + U_new - U_old)));

  // TODO: Ask why Tobias added constrain (K_new + U_new) == (K_new + U_new)
  if(u <= alpha)
  {
    ++_acceptanceCount;
    _sampleAccepted = true;
    _positionLeader = _positionCandidate;
  }

  if ((_chainLength >= _burnIn) && (_k->_currentGeneration % _leap == 0))
  {
    _sampleDatabase.push_back(_positionLeader);
  }

  //////////////////////////////////////////// My Code: END //////////////////////////////////////////////
  _chainLength++;
  updateState();
}

void HMC::choleskyDecomp(const std::vector<double> &inC, std::vector<double> &outL) const
{
  gsl_matrix *A = gsl_matrix_alloc(_k->_variables.size(), _k->_variables.size());

  for (size_t d = 0; d < _k->_variables.size(); ++d)
    for (size_t e = 0; e < d; ++e)
    {
      gsl_matrix_set(A, d, e, inC[d * _k->_variables.size() + e]);
      gsl_matrix_set(A, e, d, inC[e * _k->_variables.size() + d]);
    }
  for (size_t d = 0; d < _k->_variables.size(); ++d) gsl_matrix_set(A, d, d, inC[d * _k->_variables.size() + d]);

  int err = gsl_linalg_cholesky_decomp1(A);

  if (err == GSL_EDOM)
  {
    _k->_logger->logWarning("Normal", "Chain Covariance negative definite (not updating Cholesky Decomposition of Chain Covariance).\n");
  }
  else
  {
    for (size_t d = 0; d < _k->_variables.size(); ++d)
      for (size_t e = 0; e < d; ++e)
      {
        outL[d * _k->_variables.size() + e] = gsl_matrix_get(A, d, e);
      }
    for (size_t d = 0; d < _k->_variables.size(); ++d) outL[d * _k->_variables.size() + d] = gsl_matrix_get(A, d, d);
  }

  gsl_matrix_free(A);
}

void HMC::generateCandidate()
{
  /////////////////////////////////////////// My Code: START /////////////////////////////////////////////
  _proposedSampleCount++;
  
  size_t dim = _k->_variables.size();

  // saple momentum p from p ~ N(0.0, metric)
  if((_useAdaptiveSampling == false) || (_sampleDatabase.size() <= _nonAdaptionPeriod + _burnIn))
  {
    for(size_t d = 0; d < dim; ++d)
    {
      // TODO: Change to std::fill
      _momentumCandidate[d] = 0.0;
      for(size_t e = 0; e < dim; ++e)
      {
        _momentumCandidate[d] += _choleskyDecompositionMetric[d*dim + e] * _normalGenerator->getRandomNumber();
      }
    }
  }else
  {
    for(size_t d = 0; d < dim; ++d)
    {
      _momentumCandidate[d] = 0.0;
      for(size_t e = 0; e < dim; ++e)
      {
        _momentumCandidate[d] += _choleskyDecompositionEuclideanMetric[d*dim + e] * _normalGenerator->getRandomNumber();
      }
    }
  }
  //////////////////////////////////////////// My Code: END //////////////////////////////////////////////
}

void HMC::updateState()
{
  /////////////////////////////////////////// My Code: START /////////////////////////////////////////////
  _acceptanceRate = ((double)_acceptanceCount / (double)_chainLength);

  if (_sampleDatabase.size() == 0) 
  {
    return;
  }
  
  if (_sampleDatabase.size() == 1)
  {
    for (size_t d = 0; d < _k->_variables.size(); d++) 
    {
      _positionMean[d] = _positionLeader[d];
    }
    return;
  }

  if(_useAdaptiveSampling == true)
  {
    for (size_t d = 0; d < _k->_variables.size(); d++)
    {
      for (size_t e = 0; e < d; e++)
      {
        _inverseMetricPlaceholder[d * _k->_variables.size() + e] = (_positionMean[d] - _positionLeader[d]) * (_positionMean[e] - _positionLeader[e]);
        _inverseMetricPlaceholder[e * _k->_variables.size() + d] = (_positionMean[d] - _positionLeader[d]) * (_positionMean[e] - _positionLeader[e]);
      }
    }
    for (size_t d = 0; d < _k->_variables.size(); d++)
    {
      _inverseMetricPlaceholder[d * _k->_variables.size() + d] = (_positionMean[d] - _positionLeader[d]) * (_positionMean[d] - _positionLeader[d]);
    }  
  }

  // Chain Mean
  for (size_t d = 0; d < _k->_variables.size(); d++)
  {
    _positionMean[d] = (_positionMean[d] * (_sampleDatabase.size() - 1) + _positionLeader[d]) / _sampleDatabase.size();
  }

  if(_useAdaptiveSampling == true)
  {
    for (size_t d = 0; d < _k->_variables.size(); d++)
    {
      for (size_t e = 0; e < d; e++)
      {
        _inverseMetric[d * _k->_variables.size() + e] = (_sampleDatabase.size() - 2.0) / (_sampleDatabase.size() - 1.0) * _inverseMetric[d * _k->_variables.size() + e] + (_inverseMetricScaling / _sampleDatabase.size()) * _inverseMetricPlaceholder[d * _k->_variables.size() + e];
        _inverseMetric[e * _k->_variables.size() + d] = (_sampleDatabase.size() - 2.0) / (_sampleDatabase.size() - 1.0) * _inverseMetric[d * _k->_variables.size() + e] + (_inverseMetricScaling / _sampleDatabase.size()) * _inverseMetricPlaceholder[d * _k->_variables.size() + e];
      }
    }

    for (size_t d = 0; d < _k->_variables.size(); d++)
    {
      _inverseMetric[d * _k->_variables.size() + d] = (_sampleDatabase.size() - 2.0) / (_sampleDatabase.size() - 1.0) * _inverseMetric[d * _k->_variables.size() + d] + (_inverseMetricScaling / _sampleDatabase.size()) * _inverseMetricPlaceholder[d * _k->_variables.size() + d];
    }
  }

  if ((_useAdaptiveSampling == true) && (_sampleDatabase.size() > _nonAdaptionPeriod)) 
  {
    // TODO: implement inverseMatrix
    inverseMatrix(_inverseMetric, _metric);
    choleskyDecomp(_metric, _choleskyDecompositionEuclideanMetric);
  }
  //////////////////////////////////////////// My Code: END //////////////////////////////////////////////
}

void HMC::printGenerationBefore() { return; }

void HMC::printGenerationAfter()
{
  _k->_logger->logInfo("Minimal", "Database Entries %ld\n", _sampleDatabase.size());

  _k->_logger->logInfo("Normal", "Accepted Samples: %zu\n", _acceptanceCount);
  _k->_logger->logInfo("Normal", "Acceptance Rate Proposals: %.2f%%\n", 100 * _acceptanceRate);

  _k->_logger->logInfo("Detailed", "Current Sample:\n");
  for (size_t d = 0; d < _k->_variables.size(); d++) _k->_logger->logData("Detailed", "         %s = %+6.3e\n", _k->_variables[d]->_name.c_str(), _positionLeader[d]);

  _k->_logger->logInfo("Detailed", "Current Position Mean:\n");
  for (size_t d = 0; d < _k->_variables.size(); d++) _k->_logger->logData("Detailed", "         %s = %+6.3e\n", _k->_variables[d]->_name.c_str(), _positionMean[d]);
  _k->_logger->logInfo("Detailed", "Current Position Metric:\n");
  for (size_t d = 0; d < _k->_variables.size(); d++)
  {
    for (size_t e = 0; e <= d; e++) _k->_logger->logData("Detailed", "         %+6.3e  ", _metric[d * _k->_variables.size() + e]);
    _k->_logger->logInfo("Detailed", "\n");
  }

  _k->_logger->logInfo("Detailed", "Current Position Inverse Metric:\n");
  for (size_t d = 0; d < _k->_variables.size(); d++)
  {
    for (size_t e = 0; e <= d; e++) _k->_logger->logData("Detailed", "         %+6.3e  ", _inverseMetric[d * _k->_variables.size() + e]);
    _k->_logger->logInfo("Detailed", "\n");
  }
}

void HMC::finalize()
{
  _k->_logger->logInfo("Minimal", "Number of Generated Samples: %zu\n", _proposedSampleCount);
  _k->_logger->logInfo("Minimal", "Acceptance Rate: %.2f%%\n", 100 * _acceptanceRate);
  if (_sampleDatabase.size() == _maxSamples) _k->_logger->logInfo("Minimal", "Max Samples Reached.\n");
  (*_k)["Results"]["Sample Database"] = _sampleDatabase;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// My Functions: START ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double HMC::K(std::vector<double> p)
{
  size_t dim = _k->_variables.size();
  double result = 0.0;
  
  for(size_t i = 0; i < dim; ++i)
  {
    for(size_t j = 0; j < dim; ++j)
    {
      result = result + p[i] * _inverseMetric[i*dim + j] * p[j];
    }
  }
  result = 0.5 * result;

  return result;
}

std::vector<double> HMC::dK(std::vector<double> p)
{
  size_t dim = _k->_variables.size();
  std::vector<double> result(dim, 0.0);
  double sum = 0.0;

  for(size_t i = 0; i < dim; ++i)
  {
    sum = 0.0;
    for(size_t j = 0; j < dim; ++j)
    {
      sum = sum + _inverseMetric[i*dim + j] * p[j];
    }
    result[i] = sum;
  }

  return result;
}

double HMC::U(std::vector<double> q)
{
  auto sample = Sample();

  _modelEvaluationCount++;
  sample["Parameters"] = q;
  sample["Sample Id"] = _sampleDatabase.size();
  sample["Module"] = "Problem";
  sample["Operation"] = "Evaluate";
  _conduit->start(sample);
  _conduit->wait(sample);

  // change to logP(x)
  double evaluation = KORALI_GET(double, sample, "P(x)");

  return -evaluation;
}

std::vector<double> HMC::dU(std::vector<double> q)
{
  size_t dim = _k->_variables.size();
  // TODO:Implement dU

  // TODO: REMOVE: Hardcoding gradient of U
  std::vector<double> result = q;

  return result;
}

void HMC::leapFrogStep()
{
  size_t dim = _k->_variables.size();
  
  std::vector<double> dU = HMC::dU(_positionCandidate);
  // std::vector<double> dU = -KORALI_GET(std::vector<double>, theta, "dlogP(x)");
  for(size_t i = 0; i < dim; ++i)
  {
    _momentumCandidate[i] = _momentumCandidate[i] - 0.5 * _stepSize * dU[i];
  }
  
  // std::vector<double> dK = std::vector<double> (dim, 0.);
  std::vector<double> dK = HMC::dK(_momentumCandidate);
  for(size_t i = 0; i < dim; ++i)
  {
    _positionCandidate[i] = _positionCandidate[i] + _stepSize * dK[i];
  }

  // dU = std::vector<double> (dim, 0.);
  dU = HMC::dU(_positionCandidate);
  for(size_t i = 0; i < dim; ++i)
  {
    _momentumCandidate[i] = _momentumCandidate[i] - 0.5 * _stepSize * dU[i]; 
  }
}

void HMC::inverseMatrix(std::vector<double> mat, std::vector<double>& inverseMat)
{
  // TODO: Implement invMatrix

  return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// My Functions: END /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace sampler

} // namespace solver

} // namespace korali
